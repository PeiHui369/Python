#Functions
> Functions in code
pd.read_csv() : turns a csv file into a table in Python
plt.plot() : turns data into a line plot
plt.show() : displays plot in a new window

> Anatomy
module.funcName(df.x, df.y, argName = 'arg')

#Pandas
- Loading
df = pd.read_csv('csvFileName')
- Display
print(df)
- Inspecting
i. df.head() #First 5 rows
ii. df.info() #Number of rows, Column Names, Data Types

# Selecting Columns
- contains spaces, special characters: var = tableName ['columnName']
- contains letters, number, underscore: var = tableName.columnName

# Selecting Rows with Logic
- Types: >, >=, <, <=, !=
dataframeName.column > value #Print out the value in the specific column is true/false in 1 column
dataframeName[dataframeName.column > value] #Print out rows with column which is true conditional statement
dataframeName[dataframeName.column == ""] ##Print out rows with column which has the stated value
- Summary: DataFrameName[Logical Statement]

# Creating lineport
- Uses a coordinate grid to plot a series of points and then connects each point using a line
> Import
from matplotlib import pyplot as plt
> To plot
plt.plot (x_values, y_values)
x_values: dataframeName.rows
y_values: dataframeName.columns
> Display
plt.show() 
multiple lines auto diff colour

# Adding Text to Plot
> Label
i. plt.xlabel("what we want it to read"）
ii. plt.ylabel("what we want it to read"）
iii. plt.title("the title")

> Legend: multiple lines
plt.plot(name.x_values, name.y_values, label = "name")
plt.legend()

> Arbitrary text
plt.text(x_coordinate, y_coordinate, "TextMessage")

> Modifying text
- change font size
plt.title("Plot title", fontsize = 20)
- change font color
plt.legend(color="green")

------------------------------------------------------------------------------------------
#1
Modules/ Packages/ Libraries: Grp tgt related sets of tools
@ statsmodels, sm: machine learning
@ seaborn, sns: visualization library

>>
import x
import x as alias

#2
Case sensitive
- modules in lowercase

#3
varName = varValue
strName = "str" or 'str'

#4 create a DataFrame from a CSV (comma-separated value) file
pd.read_csv('csvFileName')
-  represents spreadsheet-like data (something with rows and columns)

#5 
lookup_plate(variable, keyword = 'arg')
- accepts one positional argument: A string representing a license plate.

#6

