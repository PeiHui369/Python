# Basic plots with Matplotlib
> Import
import matplotlib.pyplot as plt

> Line Plot
plt.plot(df.x_data, df.y_data)

> Scatter Plot: 
- clearly see data points
- assess if there's a correlation between 2 variables [higher, higher : positive]
plt.scatter(df.x_data, df.y_data)

> Put on a logarithmatic scale
plt.xscale('log') #put x-axis on

> Display
plt.show()

# Histogram
> Create
plt.hist(dataset)

> Changing bins
plt.hist(dataset, bins)
- Too few: oversimplify reality (X details)
- Too many: overcomplicate reality (X bigger picture)

> Clean up
plt.clf()
- clear the current figure

> Full
plt.hist(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, *, data=None, **kwargs)
- Argument refer help(plt.hist)

# Customization
> Label axes
plt.xlabel()
plt.ylabel

> Title
plt.title()

> y-axis start with
plt.yticks([0,2,4,6,8,10],['0','2B','4B','6B','8B','10B']) #[1] scale, [2] scale label

> Add more data
a = [....] + c
b = [....] + d

> Draw gridline on plot
plt.grid(True)

# DICTIONARIES
dictName = {"key":value, "key2":value2}

> Get index of item from list
var = listName.index("item")

> Print all keys
dictName.keys()

> Print value
dictName['key']

> Add key value pairs
dictName['key'] = value

> Check if key exist
'key' in dictName

- if same key, value updated

> Remove key value pairs
del(dictName['key'])

>> Dictionary of Dictionaries { ' ': {}, ' ' : {} }
> To access
dictName['key']['key in subDict']

> To add subdictionary
subDictName = { }
dictName['key'] = subDictName

#Pandas
row : observations
column : variable

> import pandas as pd

> Build dataframe from dictionary
dict = {
        "key1" : ["value1", "value2"],
        "key2" : ["Value1", "value2"],
        ... }
- key: column label; value: data (column by column)
import pandas as pd
dfName = pd.DataFrame(dict)

> Specify index
dfName.index["labelRow1", "labelRow2"]
or
dfName.index = listName

> Import the fileName.csv data
dfName = pd.read_csv("fileName.csv")

> DataFrame from CSV file
dfName = pd.read_psv("path/to/csvFileName.csv", index_col = 0)
- index_col specify which column used as row index

>>> Select data
>> Square Bracket
> Column Access []
dfName[["key"]]
dfName[["key1","key2"]]
- type: pandas.core.frame.DataFrame

/*
dfName["key"]
dfName[indexNo]: select rows
*/

> Row Access []
- slice
dfName [startIndexInclusive : endIndexExclusive]

>> loc (label-based)
> Row Access loc
dfName.loc["index"]
- get 1 column column_labels & 1 column value for the row
dfName.loc[["index"]]
- get DataFrame
dfName.loc[["index1","index2]]
- get multiple rows DataFrame

> Row & Column loc
dfName.loc[["index"],["column_label"]]
or
dfName.loc[:,["column_label"]] #all rows, specific column

>> iloc (integer position-based)
> Row Access
dfName.iloc[[rowIndex]]
dfName.iloc[[rowIndex1, rowIndex2]]

> Row & Column iloc
dfName.iloc[[rowIndex],[columnIndex]]
dfName.iloc[:,[columnIndex]] #all rows, specific column

- Print value/ as Series: []
- Print dataframe: [[]]
- [[rows],[columns]]

# Comparison Operators: tell how value relate, result in boolean

# Boolean Operators
True and True >> True

False or False >> False

not False >>True
not True >>False

np.logical_and(cond1, cond2)
>> True/ False
npArrayName [np.logical_and(cond1,cond2)]
>> Values True


# if, elif, else
if:
indentation
elif:
indentation
else:
indentation
- can surround cond with ()

# Filtering pandas data frame
- Comparison Operator
dfName[dfName["column_label"] condition]

- Boolean Operator
dfName[np.logical_and/or/not(cond1, cond2)]

- Extract as series
dr = x["column_label"]
- use dr to subset cars: sel
sel = x[dr]

-
cpc = cars['cars_per_cap'] #Select the column
between = np.logical_and(cpc > 10, cpc < 80) #Compare the column values with the condition --> True/False
medium = cars[between] #Into DataFrame

# WHILE loop
while condition:
        expression
        

# FOR loop

for var in seq:
        expression
- for each var in seq, execute expression

for index,height in enumerate(fam):
        print("index " + str(index) + "ï¼š " + str(height))
        
> Loop over string
for c in "family":
        print (c.capitalize())
        
> Loop over list of lists
for item in list:
        print(item[0] + item[1])
        
#LOOP Data Structures 
<Dictionary>
for k, v in dictName.items():
        print( k + " -- " + str(v))

<NumPy Array>
for x in numpyArrayName:
        print(x)

<2D Numpy Array>
combineNpArrayName = np.array([npArr1, npArr2])
for x in np.nditer(combineNpArrayName):
        print x
        
<CSV File>
- Iterrows
for lab, row in CSVfileName.iterrows():
        print(lab)
        print(row)

- Selective Print
for lab, row in CSVfileName.iterrows():
        print(lab + ": " + row["column_labels"])


-     cars.loc[lab, "COUNTRY"] = row["country"].upper() //add a column(label: COUNTRY), the data is get from column(label: country) and make all uppercase

> Add Column
Function: brics["name_length"] = brics["country"].apply(len)
Method: cars["COUNTRY"] = cars["country"].apply(str.upper)

# RANDOM FLOAT
@seed(): sets the random seed, so that your results are reproducible between simulations. 
As an argument, it takes an integer of your choosing. 
If you call the function, no output will be generated.

@rand(): if you don't specify any arguments, it generates a random float between zero and one.




